{"index": 0, "description": "Design a register (mulreg) that is controlled by a clock signal. This module has an input for data (iMULHB) and a write control signal (iWRMLR). When the write signal is HIGH during a clock edge, the 8-bit register (rMULRG) is updated with the value of iMULHB. If the write signal is LOW, the register retains its current value. The output (oMULRG) continuously reflects the contents of the register.\n", "code": "module top_module (\n    input iCLK,\n    input iWRMLR,\n    input [7:0] iMULHB,\n    output reg [7:0] oMULRG\n);\n    reg [7:0] rMULRG;\n\n    always @(posedge iCLK) begin\n        if (iWRMLR) begin\n            rMULRG <= iMULHB;\n        end\n    end\n\n    assign oMULRG = rMULRG;\nendmodule"}
{"index": 1, "description": "Design a circuit that functions as a 2-input AND gate. It takes two inputs, A and B, and produces an output Y that is the logical AND of A and a constant HIGH signal (logic level 1). The circuit also includes power and ground connections (VPWR and VGND) to ensure proper operation of the logic gate instantiated within the design.\n", "code": "module top_module (\n    input A,\n    input B,\n    input VPWR,\n    input VGND,\n    output Y\n);\n    assign Y = A & B;\nendmodule"}
{"index": 2, "description": "Design a simple memory-mapped I/O module that interfaces with an external system through a 2-bit address input and a control signal. This module has the capability to read and write 8-bit data based on the chip select and write signals. When the `chipselect` is active and the `write_n` signal is low, data can be written into an internal register at address 0. The output port reflects the stored data, while the `readdata` output returns the data corresponding to the read request. The design incorporates reset functionality to initialize the stored data to zero and is clock-triggered, ensuring synchronization with the system clock.\n", "code": "module top_module(\n                         \n                          address,\n                          chipselect,\n                          clk,\n                          reset_n,\n                          write_n,\n                          writedata,\n\n                         \n                          out_port,\n                          readdata\n                       )\n;module top_module(\n    input [1:0] address,\n    input chipselect,\n    input clk,\n    input reset_n,\n    input write_n,\n    input [7:0] writedata,\n    output reg [7:0] out_port,\n    output reg [7:0] readdata\n);\n\n    reg [7:0] stored_data;\n\n    // Write operation\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            stored_data <= 8'b0;\n        end else if (chipselect && !write_n && address == 2'b00) begin\n            stored_data <= writedata;\n        end\n    end\n\n    // Output port reflects the stored data\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            out_port <= 8'b0;\n        end else begin\n            out_port <= stored_data;\n        end\n    end\n\n    // Read operation\n    always @(*) begin\n        if (chipselect && address == 2'b00) begin\n            readdata = stored_data;\n        end else begin\n            readdata = 8'b0;\n        end\n    end\n\nendmodule"}
